//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientService.ServiceContext {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbContext", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.EntityFrameworkCore")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Service.Context))]
    public partial class DbContext : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceContext.IServiceContract")]
    public interface IServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Registration", ReplyAction="http://tempuri.org/IServiceContract/RegistrationResponse")]
        Service.Responses.RegistrationResponse Registration([System.ServiceModel.MessageParameterAttribute(Name="registration")] Service.Requests.RegistrationRequest registration1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Registration", ReplyAction="http://tempuri.org/IServiceContract/RegistrationResponse")]
        System.Threading.Tasks.Task<Service.Responses.RegistrationResponse> RegistrationAsync(Service.Requests.RegistrationRequest registration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Autorization", ReplyAction="http://tempuri.org/IServiceContract/AutorizationResponse")]
        Service.Responses.AutorizationResponse Autorization([System.ServiceModel.MessageParameterAttribute(Name="autorization")] Service.Requests.AutorizationRequest autorization1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Autorization", ReplyAction="http://tempuri.org/IServiceContract/AutorizationResponse")]
        System.Threading.Tasks.Task<Service.Responses.AutorizationResponse> AutorizationAsync(Service.Requests.AutorizationRequest autorization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Recording", ReplyAction="http://tempuri.org/IServiceContract/RecordingResponse")]
        string Recording([System.ServiceModel.MessageParameterAttribute(Name="recording")] Service.Requests.RecordingRequest recording1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Recording", ReplyAction="http://tempuri.org/IServiceContract/RecordingResponse")]
        System.Threading.Tasks.Task<string> RecordingAsync(Service.Requests.RecordingRequest recording);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Db", ReplyAction="http://tempuri.org/IServiceContract/DbResponse")]
        void Db(Service.Context context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContract/Db", ReplyAction="http://tempuri.org/IServiceContract/DbResponse")]
        System.Threading.Tasks.Task DbAsync(Service.Context context);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceContractChannel : ClientService.ServiceContext.IServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceContractClient : System.ServiceModel.ClientBase<ClientService.ServiceContext.IServiceContract>, ClientService.ServiceContext.IServiceContract {
        
        public ServiceContractClient() {
        }
        
        public ServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Service.Responses.RegistrationResponse Registration(Service.Requests.RegistrationRequest registration1) {
            return base.Channel.Registration(registration1);
        }
        
        public System.Threading.Tasks.Task<Service.Responses.RegistrationResponse> RegistrationAsync(Service.Requests.RegistrationRequest registration) {
            return base.Channel.RegistrationAsync(registration);
        }
        
        public Service.Responses.AutorizationResponse Autorization(Service.Requests.AutorizationRequest autorization1) {
            return base.Channel.Autorization(autorization1);
        }
        
        public System.Threading.Tasks.Task<Service.Responses.AutorizationResponse> AutorizationAsync(Service.Requests.AutorizationRequest autorization) {
            return base.Channel.AutorizationAsync(autorization);
        }
        
        public string Recording(Service.Requests.RecordingRequest recording1) {
            return base.Channel.Recording(recording1);
        }
        
        public System.Threading.Tasks.Task<string> RecordingAsync(Service.Requests.RecordingRequest recording) {
            return base.Channel.RecordingAsync(recording);
        }
        
        public void Db(Service.Context context) {
            base.Channel.Db(context);
        }
        
        public System.Threading.Tasks.Task DbAsync(Service.Context context) {
            return base.Channel.DbAsync(context);
        }
    }
}
